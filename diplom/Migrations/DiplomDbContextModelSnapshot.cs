// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using diplom.Data;

#nullable disable

namespace diplom.Migrations
{
    [DbContext(typeof(DiplomDbContext))]
    partial class DiplomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("diplom.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Course")
                        .HasColumnType("integer")
                        .HasColumnName("course");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer")
                        .HasColumnName("specialization_id");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("group_pkey");

                    b.HasIndex("SpecializationId");

                    b.ToTable("group", (string)null);
                });

            modelBuilder.Entity("diplom.Models.Load", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("AllHoursInFirstSemester")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("all_hours_in_first_semester");

                    b.Property<string>("AllHoursInSecondSemester")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("all_hours_in_second_semester");

                    b.Property<int?>("ConsultationTime")
                        .HasColumnType("integer")
                        .HasColumnName("consultation_time");

                    b.Property<int?>("CourseProjectTime")
                        .HasColumnType("integer")
                        .HasColumnName("course_project_time");

                    b.Property<int>("FirstSemesterTime")
                        .HasColumnType("integer")
                        .HasColumnName("first_semester_time");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<int?>("LpzOneTime")
                        .HasColumnType("integer")
                        .HasColumnName("lpz_one_time");

                    b.Property<int?>("LpzTwoTime")
                        .HasColumnType("integer")
                        .HasColumnName("lpz_two_time");

                    b.Property<int>("PracticalTime")
                        .HasColumnType("integer")
                        .HasColumnName("practical_time");

                    b.Property<int>("SecondSemesterTime")
                        .HasColumnType("integer")
                        .HasColumnName("second_semester_time");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.Property<int>("TheoryTime")
                        .HasColumnType("integer")
                        .HasColumnName("theory_time");

                    b.Property<int>("Total")
                        .HasColumnType("integer")
                        .HasColumnName("total");

                    b.HasKey("Id")
                        .HasName("Load_pkey");

                    b.HasIndex("GroupId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("load", (string)null);
                });

            modelBuilder.Entity("diplom.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qualification");

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("specialization_name");

                    b.HasKey("Id")
                        .HasName("specialization_pkey");

                    b.ToTable("specialization", (string)null);
                });

            modelBuilder.Entity("diplom.Models.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject_name");

                    b.HasKey("Id")
                        .HasName("subject_pkey");

                    b.ToTable("subject", (string)null);
                });

            modelBuilder.Entity("diplom.Models.SubjectSpecialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("SpecializationId")
                        .HasColumnType("integer")
                        .HasColumnName("specialization_id");

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.HasKey("Id")
                        .HasName("subject_specialization_pkey");

                    b.HasIndex("SpecializationId");

                    b.HasIndex("SubjectId");

                    b.ToTable("subject_specialization", (string)null);
                });

            modelBuilder.Entity("diplom.Models.Teacher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("full_name");

                    b.HasKey("Id")
                        .HasName("teacher_pkey");

                    b.ToTable("teacher", (string)null);
                });

            modelBuilder.Entity("diplom.Models.TeacherSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<int>("SubjectId")
                        .HasColumnType("integer")
                        .HasColumnName("subject_id");

                    b.Property<int>("TeacherId")
                        .HasColumnType("integer")
                        .HasColumnName("teacher_id");

                    b.HasKey("Id")
                        .HasName("teacher_subject_pkey");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("teacher_subject", (string)null);
                });

            modelBuilder.Entity("diplom.Models.Group", b =>
                {
                    b.HasOne("diplom.Models.Specialization", "Specialization")
                        .WithMany("Groups")
                        .HasForeignKey("SpecializationId")
                        .IsRequired()
                        .HasConstraintName("group_specialization_id_fkey");

                    b.Navigation("Specialization");
                });

            modelBuilder.Entity("diplom.Models.Load", b =>
                {
                    b.HasOne("diplom.Models.Group", "Group")
                        .WithMany("Loads")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("load_group_id_fkey");

                    b.HasOne("diplom.Models.Subject", "Subject")
                        .WithMany("Loads")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("load_subject_id_fkey");

                    b.HasOne("diplom.Models.Teacher", "Teacher")
                        .WithMany("Loads")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("load_teacher_id_fkey");

                    b.Navigation("Group");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("diplom.Models.SubjectSpecialization", b =>
                {
                    b.HasOne("diplom.Models.Specialization", "Specialization")
                        .WithMany("SubjectSpecializations")
                        .HasForeignKey("SpecializationId")
                        .IsRequired()
                        .HasConstraintName("subject_specialization_specialization_id_fkey");

                    b.HasOne("diplom.Models.Subject", "Subject")
                        .WithMany("SubjectSpecializations")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("subject_specialization_subject_id_fkey");

                    b.Navigation("Specialization");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("diplom.Models.TeacherSubject", b =>
                {
                    b.HasOne("diplom.Models.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("SubjectId")
                        .IsRequired()
                        .HasConstraintName("teacher_subject_subject_id_fkey");

                    b.HasOne("diplom.Models.Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherId")
                        .IsRequired()
                        .HasConstraintName("teacher_subject_teacher_id_fkey");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("diplom.Models.Group", b =>
                {
                    b.Navigation("Loads");
                });

            modelBuilder.Entity("diplom.Models.Specialization", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("SubjectSpecializations");
                });

            modelBuilder.Entity("diplom.Models.Subject", b =>
                {
                    b.Navigation("Loads");

                    b.Navigation("SubjectSpecializations");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("diplom.Models.Teacher", b =>
                {
                    b.Navigation("Loads");

                    b.Navigation("TeacherSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
